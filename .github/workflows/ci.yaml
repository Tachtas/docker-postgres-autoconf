#!/usr/bin/env python3
import subprocess
import os
from datetime import datetime
from plumbum import local
from plumbum.commands.processes import ProcessExecutionError

docker = local["docker"]

# --- Ambil argumen environment dari CI ---
VCS_REF = os.environ.get("GIT_SHA1", "")
BUILD_DATE = datetime.utcnow().isoformat()
BASE_TAG = os.environ.get("BASE_TAG", "17-alpine")
IMAGE = f"{os.environ.get('DOCKER_REPO', 'tecnativa/postgres-autoconf')}:{os.environ.get('DOCKER_TAG', '17-alpine')}"

# --- Validasi base image dulu ---
base_image = f"docker.io/postgres:{BASE_TAG}"
print(f"üîç Checking if base image exists: {base_image}")
check = subprocess.run(
    ["docker", "manifest", "inspect", base_image],
    capture_output=True,
)

if check.returncode != 0:
    print(f"‚ö†Ô∏è Base image {base_image} not found, falling back to postgres:17-alpine")
    BASE_TAG = "17-alpine"
    base_image = f"docker.io/postgres:{BASE_TAG}"

print(f"‚úÖ Using base image: {base_image}")

# --- Build args & build command ---
cmd = [
    "docker",
    "buildx",
    "build",
    "--platform", "linux/arm64",
    "--build-arg", f"VCS_REF={VCS_REF}",
    "--build-arg", f"BUILD_DATE={BUILD_DATE}",
    "--build-arg", f"BASE_TAG={BASE_TAG}",
    "--tag", IMAGE,
    ".",
]

# Jika CI variable REGISTRY_HOST diset, otomatis push
if os.environ.get("REGISTRY_HOST"):
    cmd.append("--push")

print(f"üöÄ Building image: {IMAGE}")
try:
    docker[cmd[1:]] & local.FG
except ProcessExecutionError as e:
    print(f"‚ùå Build failed: {e}")
    exit(1)

print("‚úÖ Build finished successfully.")
